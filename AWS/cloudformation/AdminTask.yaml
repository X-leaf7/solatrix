AWSTemplateFormatVersion: 2010-09-09

Description: Builds resources specific to the Admin Fargate Service

Parameters:
  ClusterName:
    Type: String
  ServiceName:
    Type: String
  Image:
    Type: String
  ExecutionRole:
    Type: String
  ContainerPort:
    Type: Number
  LoadBalancerSecurityGroup:
    Type: String
  RDSConnectionSecret:
    Type: String
  S3BucketName:
    Type: String
  Domain:
    Type: String

Resources:

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Sub "${ServiceName}-TaskDefinition"
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 512
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 1GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - !Sub "curl --fail http://localhost:${ContainerPort}/health/ || exit 1"
            StartPeriod: 90
            Interval: 10
            Retries: 5
          Environment:
            - Name: DB_NAME
              Value: postgres
            - Name: DJANGO_SETTINGS_MODULE
              Value: config.settings.prod
            - Name: S3_BUCKET
              Value: !Ref S3BucketName
            - Name: WEB_DOMAIN
              Value: !Ref Domain
          Secrets:
            - Name: DB_USERNAME
              ValueFrom: !Sub "${RDSConnectionSecret}:username::"
            - Name: DB_PASSWORD
              ValueFrom: !Sub "${RDSConnectionSecret}:password::"
            - Name: DB_HOSTNAME
              ValueFrom: !Sub "${RDSConnectionSecret}:host::"
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LinuxParameters:
            InitProcessEnabled: true
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ClusterName, ContainerSecurityGroup]]
      VpcId: !GetAtt VPC.Outputs.VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ClusterName}/${ServiceName}"

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowECSExec
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
        - PolicyName: AllowS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub "arn:aws:s3:::${Bucket}/*"
                  - !Sub "arn:aws:s3:::${Bucket}"
                Action: "s3:*"
        - PolicyName: AllowSendEmails
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'ses:SendEmail'
                  - 'ses:SendRawEmail'
                Resource: '*'
              - Effect: Allow
                Action: 'ses:GetSendQuota'
                Resource: '*'

Outputs:
  TaskDefinition:
    Value: !Ref TaskDefinition
  ContainerSecurityGroup:
    Value: !Ref ContainerSecurityGroup